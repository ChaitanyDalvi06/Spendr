import * as React from 'react';
import { NumberFlowLite, Value, Format, Props } from 'number-flow';
export { Format, Trend, Value } from 'number-flow';

declare const OBSERVED_ATTRIBUTES: readonly ["parts"];
type ObservedAttribute = (typeof OBSERVED_ATTRIBUTES)[number];
declare class NumberFlowElement extends NumberFlowLite {
    static observedAttributes: readonly ["parts"];
    attributeChangedCallback(attr: ObservedAttribute, _oldValue: string, newValue: string): void;
}
type NonPartsProps = Omit<Props, 'manual'>;
type BaseProps = React.HTMLAttributes<NumberFlowElement> & Partial<NonPartsProps> & {
    isolate?: boolean;
    willChange?: boolean;
    onAnimationsStart?: () => void;
    onAnimationsFinish?: () => void;
};
type NumberFlowProps = BaseProps & {
    value: Value;
    locales?: Intl.LocalesArgument;
    format?: Format;
};
declare const NumberFlow: React.ForwardRefExoticComponent<React.HTMLAttributes<NumberFlowElement> & Partial<NonPartsProps> & {
    isolate?: boolean;
    willChange?: boolean;
    onAnimationsStart?: () => void;
    onAnimationsFinish?: () => void;
} & {
    value: Value;
    locales?: Intl.LocalesArgument;
    format?: Format;
} & React.RefAttributes<NumberFlowElement>>;

declare function useCanAnimate({ respectMotionPreference }?: {
    respectMotionPreference?: boolean | undefined;
}): boolean;

export { NumberFlowElement, type NumberFlowProps, NumberFlow as default, useCanAnimate };
